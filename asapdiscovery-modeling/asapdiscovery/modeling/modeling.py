from asapdiscovery.data.openeye import oechem, oespruce


def spruce_protein(
    initial_prot: oechem.OEGraphMol,
    return_du=False,
    seqres: str = None,
    loop_db: str = None,
    site_residue="HIS:41: :A:0: ",
) -> oechem.OEDesignUnit or oechem.OEGraphMol:
    """
    Applies the OESpruce protein preparation pipeline to the given protein structure.

    Args:
    - initial_prot (oechem.OEMol): the input protein structure to be prepared.
    - return_du (bool, optional): whether to return a design unit (DU) as the output. If True, the function will
      return the DU generated by the OESpruce pipeline; if False, the function will return the prepared protein
      structure as an oechem.OEGraphMol. Default is False.
    - seqres (str, optional): the SEQRES string of the protein. If provided, the SEQRES metadata will be added
      to the structure before applying the OESpruce pipeline. Default is None.
    - loop_db (str, optional): the filename of the loop database to be used by the OESpruce pipeline. If provided,
      the pipeline will include loop building step. Default is None.
    - site_residue (str, optional): the site residue used to define the binding site of the protein. Default is
      "HIS:41: :A:0: ". This is necessary when there is no ligand in the input structure, otherwise OpenEye will not
      know where to put the binding site.

    Returns:
    - oechem.OEMol: the prepared protein structure, or a DU generated by the OESpruce pipeline if return_du is True.
    """
    from asapdiscovery.data.openeye import openeye_perceive_residues

    # Add Hs to prep protein and ligand
    oechem.OEAddExplicitHydrogens(initial_prot)

    # Set up DU building options
    opts = oespruce.OEMakeDesignUnitOptions()
    opts.SetSuperpose(False)
    # Options set from John's function ########################################
    # (https://github.com/FoldingAtHome/covid-moonshot/blob/454098f4255467f4655102e0330ebf9da0d09ccb/synthetic-enumeration/sprint-14-quinolones/00-prep-receptor.py)
    opts.GetPrepOptions().SetStrictProtonationMode(True)
    # set minimal number of ligand atoms to 5, e.g. a 5-membered ring fragment\
    opts.GetSplitOptions().SetMinLigAtoms(5)

    # also consider alternate locations outside binding pocket, important for later filtering
    opts.GetPrepOptions().GetEnumerateSitesOptions().SetCollapseNonSiteAlts(True)

    # alignment options, only matches are important
    opts.GetPrepOptions().GetBuildOptions().GetLoopBuilderOptions().SetSeqAlignMethod(
        oechem.OESeqAlignmentMethod_Identity
    )
    opts.GetPrepOptions().GetBuildOptions().GetLoopBuilderOptions().SetSeqAlignGapPenalty(
        -1
    )
    opts.GetPrepOptions().GetBuildOptions().GetLoopBuilderOptions().SetSeqAlignExtendPenalty(
        0
    )

    # Both N- and C-termini should be zwitterionic
    # Mpro cleaves its own N- and C-termini
    # See https://www.pnas.org/content/113/46/12997
    opts.GetPrepOptions().GetBuildOptions().SetCapNTermini(False)
    opts.GetPrepOptions().GetBuildOptions().SetCapCTermini(False)
    # Don't allow truncation of termini, since force fields don't have
    #  parameters for this
    opts.GetPrepOptions().GetBuildOptions().GetCapBuilderOptions().SetAllowTruncate(
        False
    )
    # Set Build Loop and Sidechain Opts
    sc_opts = oespruce.OESidechainBuilderOptions()

    loop_opts = oespruce.OELoopBuilderOptions()
    loop_opts.SetSeqAlignMethod(oechem.OESeqAlignmentMethod_Identity)
    loop_opts.SetSeqAlignGapPenalty(-1)
    loop_opts.SetSeqAlignExtendPenalty(0)
    loop_opts.SetLoopDBFilename(loop_db)
    loop_opts.SetBuildTails(True)

    # Allow for adding residues at the beginning/end if they're missing
    opts.GetPrepOptions().GetBuildOptions().GetLoopBuilderOptions().SetBuildTails(True)

    if loop_db is not None:
        print("Adding loop")
        opts.GetPrepOptions().GetBuildOptions().GetLoopBuilderOptions().SetLoopDBFilename(
            loop_db
        )

    # Structure metadata object
    metadata = oespruce.OEStructureMetadata()

    # Add SEQRES metadata
    if seqres:
        print("adding seqres")
        all_prot_chains = {
            res.GetExtChainID()
            for res in oechem.OEGetResidues(initial_prot)
            if (res.GetName() != "LIG") and (res.GetName() != "HOH")
        }
        for chain in all_prot_chains:
            seq_metadata = oespruce.OESequenceMetadata()
            seq_metadata.SetChainID(chain)
            seq_metadata.SetSequence(seqres)
            metadata.AddSequenceMetadata(seq_metadata)

    # Construct spruce filter
    spruce_opts = oespruce.OESpruceFilterOptions()
    spruce = oespruce.OESpruceFilter(spruce_opts, opts)

    # Spruce!
    from openeye import oegrid

    ## This object is for some reason needed in order to run spruce
    grid = oegrid.OESkewGrid()

    oespruce.OEBuildLoops(initial_prot, metadata, sc_opts, loop_opts)
    oespruce.OEBuildSidechains(initial_prot, sc_opts)
    oechem.OEPlaceHydrogens(initial_prot)
    spruce.StandardizeAndFilter(initial_prot, grid, metadata)

    # Re-percieve residues so that atom number and connect records dont get screwed up
    openeye_perceive_residues(initial_prot)

    if return_du:
        dus = list(
            oespruce.OEMakeDesignUnits(initial_prot, metadata, opts, site_residue)
        )
        try:
            return dus[0]
        except IndexError:
            return initial_prot

    return initial_prot
