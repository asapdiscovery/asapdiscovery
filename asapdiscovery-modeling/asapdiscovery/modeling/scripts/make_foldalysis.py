"""
Build a Fragalysis-style directory structure from the outputs of ColabFold.
Inside the given output directory, two additional directories will be created:
aligned and extra_files. The extra_files directory will contain the
Mpro_compound_tracker_csv.csv file, which can be used as input to the
prep_proteins.py script in asapdiscoveyr.docking. The aligned directory will
contain the PDB structure files in the same format as in the Fragalysis
database.
"""
import argparse
from glob import glob
import os
import re

################################################################################
def get_args():
    parser = argparse.ArgumentParser(description="")

    parser.add_argument(
        "-id",
        "--in_dir",
        required=True,
        help="Input directory for this script (output directory from ColabFold.)",
    )
    parser.add_argument(
        "-ic",
        "--in_csv",
        required=True,
        help="CSV file that was used as input for ColabFold.",
    )
    parser.add_argument(
        "-o", "--out_dir", required=True, help="Output directory."
    )

    return parser.parse_args()


def main():
    args = get_args()

    # Get all the sequence names that were generated by ColabFold
    # Get rid of the first one because it's just the header line
    all_ids = [l.split(",")[0] for l in open(args.in_csv).readlines()][1:]
    print(f"Found {len(all_ids)} sequences", flush=True)

    # Set up output dir
    os.makedirs(os.path.join(args.out_dir, "extra_files"), exist_ok=True)
    out_csv = os.path.join(
        args.out_dir, "extra_files", "Mpro_compound_tracker_csv.csv"
    )
    aln_dir = os.path.join(args.out_dir, "aligned")
    os.makedirs(aln_dir, exist_ok=True)

    # Counter to get the structure name right
    str_counter = 0

    # Loop through sequence names and add to CSV file and link structure file
    fp = open(out_csv, "w")
    fp.write("Dataset,SMILES,Compound ID,ColabFold ID,ColabFold file\n")
    for seq_name in all_ids:
        # Find all structure files
        # Substitute random seed placeholder with wildcard for glob
        wc_name = re.sub(r"{}", "*", seq_name)
        all_str_fns = glob(os.path.join(args.in_dir, f"{wc_name}*.pdb"))

        # Regex to get the full name (including seed) for each file
        full_name_re = re.sub(r"{}", "[0-9]+", seq_name)
        for fn in all_str_fns:
            dataset_name = f"Mpro-C{str_counter:04d}"

            try:
                full_name = re.search(full_name_re, fn).group()
            except AttributeError:
                print(f"Bad seed number for {fn}")
                continue
            # Add entry to output CSV file
            fp.write(f"{dataset_name},,{full_name},{fn}\n")

            # Link structure file
            str_path = os.path.join(aln_dir, f"{dataset_name}_0A")
            os.makedirs(str_path, exist_ok=True)
            os.symlink(
                os.path.abspath(fn),
                os.path.join(str_path, f"{dataset_name}_0A.pdb"),
            )

            str_counter += 1

    fp.close()


if __name__ == "__main__":
    main()
