import pytest
from asapdiscovery.data.backend.rdkit import load_sdf


def test_ligand_sdf(moonshot_sdf, multipose_ligand, sdf_file):
    single_conf = load_sdf(moonshot_sdf)
    assert single_conf.GetNumConformers() == 1
    multiconf = load_sdf(multipose_ligand)

    assert multiconf.GetNumConformers() == 50

    # this should fail if the file has multiple ligands
    with pytest.raises(RuntimeError):
        load_sdf(sdf_file)


def test_sd_tag_processing(moonshot_sdf, multipose_ligand):
    from asapdiscovery.data.backend.rdkit import get_SD_data, set_SD_data

    single_conf = load_sdf(moonshot_sdf)
    assert get_SD_data(single_conf) == {}

    multiconf = load_sdf(multipose_ligand)
    assert get_SD_data(multiconf) == {
        "Compound_ID": [
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
            "ADA-UCB-6c2cb422-1",
        ],
        "Dataset": [
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
            "Mpro-P2005_0A",
        ],
        "Docking_posit_hybrid_clash_Chemgauss4": [
            -3.9384562969207764,
            -3.641329765319824,
            -3.641329765319824,
            -5.787794589996338,
            -5.787794589996338,
            -5.304392337799072,
            -5.304392337799072,
            -3.629373550415039,
            -4.635014057159424,
            -3.8015196323394775,
            -3.8015196323394775,
            -8.547945976257324,
            -8.547945976257324,
            -6.297516345977783,
            -6.297516345977783,
            -4.823187828063965,
            -4.823187828063965,
            -3.479556083679199,
            -3.629373550415039,
            -4.095942497253418,
            -4.095942497253418,
            -5.212488651275635,
            -5.212488651275635,
            -5.716377258300781,
            -4.084050178527832,
            -4.084050178527832,
            -6.764339447021484,
            -2.448556661605835,
            -6.764339447021484,
            -7.55867862701416,
            -7.55867862701416,
            -6.438549518585205,
            -6.438549518585205,
            -4.74962043762207,
            -4.74962043762207,
            -6.190071105957031,
            -6.190071105957031,
            -2.448556661605835,
            -4.635014057159424,
            -3.4106383323669434,
            -3.4106383323669434,
            -5.382641315460205,
            -5.382641315460205,
            -4.797482013702393,
            -4.797482013702393,
            -4.352136611938477,
            -4.352136611938477,
            -6.079061985015869,
            -6.079061985015869,
        ],
        "Docking_posit_hybrid_clash_POSIT": [
            0.23999999463558197,
            0.23999999463558197,
            0.23999999463558197,
            0.23999999463558197,
            0.23999999463558197,
            0.23000000417232513,
            0.23000000417232513,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
            0.18000000715255737,
        ],
        "Docking_posit_hybrid_clash_POSIT_method": [
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
            "HYBRID",
        ],
        "Docking_posit_hybrid_clash_RMSD": [
            23.510106811395577,
            23.2474355030629,
            23.2474355030629,
            23.785596160082722,
            23.785596160082722,
            22.086844742438043,
            22.086844742438043,
            23.380115216879318,
            22.94069133553167,
            22.67389101837856,
            22.67389101837856,
            22.425029034179488,
            22.425029034179488,
            22.935716592901116,
            22.935716592901116,
            23.04300557300596,
            23.04300557300596,
            23.732838897883546,
            23.380115216879318,
            23.110785679666343,
            23.110785679666343,
            23.749666811478974,
            23.749666811478974,
            23.07465599544404,
            23.300128835264935,
            23.300128835264935,
            23.26022136451275,
            23.0875245713518,
            23.26022136451275,
            23.394038036867542,
            23.394038036867542,
            22.308617689730177,
            22.308617689730177,
            23.481498048106644,
            23.481498048106644,
            21.846467954052606,
            21.846467954052606,
            23.0875245713518,
            22.94069133553167,
            22.995843552344454,
            22.995843552344454,
            23.430842045375606,
            23.430842045375606,
            22.921318756086585,
            22.921318756086585,
            23.292392903257376,
            23.292392903257376,
            23.63229756112464,
            23.63229756112464,
        ],
        "Docking_posit_hybrid_clash_clash": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        "SMILES": [
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
            "c1ccc2c(c1)cncc2NC(=O)Cc3cccc(c3)Cl",
        ],
    }

    simple_data = {"test": "value"}
    set_SD_data(single_conf, simple_data)
    assert get_SD_data(single_conf)["test"] == ["value"]

    set_SD_data(multiconf, simple_data)
    assert get_SD_data(multiconf)["test"] == ["value"] * multiconf.GetNumConformers()

    with pytest.raises(ValueError):
        set_SD_data(single_conf, {"test": ["value", "value2"]})

    with pytest.raises(ValueError):
        set_SD_data(single_conf, {"test": []})

    with pytest.raises(ValueError):
        set_SD_data(multiconf, {"test": ["value", "value2"]})
