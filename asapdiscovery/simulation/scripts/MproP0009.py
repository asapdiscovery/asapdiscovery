#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jan 28 18:10:15 2023

@author: kendalllemons
"""

import os
import openmm
import argparse



# This script was generated by OpenMM-Setup on 2023-01-17.

from openmm import *
from openmm.app import *
from openmm.unit import *
from openmm.app import PDBFile


## Parameters
def get_args():
    parser = argparse.ArgumentParser()

    ## Input arguments
    parser.add_argument(
        "-i", 
        "--input_pdb_path", 
        type = str,
        default = "/data/chodera/asap-datasets/full_frag_prepped_mpro_12_2022/Mpro-P0009_0A_MAT-POS-f2460aef-1/prepped_receptor_0.pdb",
        help = "Path to PDB file to simulate"
    )
    parser.add_argument(
        "-o", 
        "--output_dir",
        type = str,
        default = "/data/chodera/lemonsk/asap-datasets/prepped_mpro_P0009/",
        help="Output simulation directory."
    )
    args = parser.parse_args()
    return args

args = get_args()

# Input Files

pdb = PDBFile(args.input_pdb_path)
forcefield = ForceField('amber14-all.xml', 'amber14/tip3pfb.xml')

# System Configuration

nonbondedMethod = PME
nonbondedCutoff = 1.0*nanometers
ewaldErrorTolerance = 0.000001
constraints = HBonds
rigidWater = True
constraintTolerance = 0.000001
hydrogenMass = 4.0*amu



# Integration Options

dt = 0.004*picoseconds
temperature = 300*kelvin
friction = 1.0/picosecond
pressure = 1.0*atmospheres
barostatInterval = 25

# Simulation Options

steps = 1000000
equilibrationSteps = 1000
platform = Platform.getPlatformByName('Reference')
dcdReporter = DCDReporter(os.path.join(args.output_dir,'trajectory.dcd'), 10000)
dataReporter = StateDataReporter(os.path.join(args.output_dir,'log.txt'), 1000, totalSteps=steps,
    step=True, speed=True, progress=True, potentialEnergy=True, temperature=True, separator='\t')
checkpointReporter = CheckpointReporter(os.path.join(args.output_dir,'checkpoint.chk'), 10000)

# Prepare the Simulation

print('Building system...')
topology = pdb.topology
positions = pdb.positions
modeller = Modeller(pdb.topology, pdb.positions)
modeller.addSolvent(forcefield, padding=0.9*nanometers, model='tip3p')
system = forcefield.createSystem(modeller.topology, nonbondedMethod=nonbondedMethod, nonbondedCutoff=nonbondedCutoff,
    constraints=constraints, rigidWater=rigidWater, ewaldErrorTolerance=ewaldErrorTolerance, hydrogenMass=hydrogenMass)
system.addForce(MonteCarloBarostat(pressure, temperature, barostatInterval))
integrator = LangevinMiddleIntegrator(temperature, friction, dt)
integrator.setConstraintTolerance(constraintTolerance)
simulation = Simulation(topology, system, integrator, platform)
simulation.context.setPositions(modeller.positions)



# Minimize and Equilibrate

print('Performing energy minimization...')
simulation.minimizeEnergy()
print('Equilibrating...')
simulation.context.setVelocitiesToTemperature(temperature)
simulation.step(equilibrationSteps)


# Simulate

print('Simulating...')
simulation.reporters.append(PDBReporter(os.path.join(args.output_dir,'output(P0009).pdb'), 10))
simulation.reporters.append(DCDReporter(os.path.join(args.output_dir,'output(P0009).dcd'), 10))
simulation.currentStep = 0
simulation.step(steps)


print('Saving...')
positions = simulation.context.getState(getPositions=True).getPositions()
PDBFile.writeFile(simulation.topology, positions, open(os.path.join(args.output_dir,'output(P0009*).pdb'), 'w'))
simulation.saveState(os.path.join(args.output_dir,'output.xml'))
print('Done')
